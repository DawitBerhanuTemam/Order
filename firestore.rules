rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Categories collection
    match /categories/{categoryId} {
      allow read: if true; // Public read
      allow write: if isAdmin(); // Only admins can create/update/delete
    }
    
    // Menu Items collection
    match /menuItems/{itemId} {
      allow read: if true; // Public read
      allow write: if isAdmin(); // Only admins can create/update/delete
    }
    
    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userEmail == request.auth.token.email || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAdmin(); // Only admins can update orders
      allow delete: if isAdmin();
    }
  }
}
